name: 'C++ CI'

on:
  push:
    branches:
      - master
      - main
      - feature/github_actions

jobs:
  dz_1:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dz_1  
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y          
    - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DWITH_CATCH_TEST=ON
    - run: cmake --build .
    - run: cmake --build . --target test
    - run: cmake --build . --target package
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dz_1/helloworld-0.0.${{ github.run_number }}-Linux.deb
        asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
        asset_content_type: application/vnd.debian.binary-package
  dz_2:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dz_2  
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y          
    - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DWITH_CATCH_TEST=ON
    - run: cmake --build .
    - run: cmake --build . --target test
    - run: cmake --build . --target package
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dz_2/filter_ip-0.0.${{ github.run_number }}-Linux.deb
        asset_name: filter_ip-0.0.${{ github.run_number }}-Linux.deb
        asset_content_type: application/vnd.debian.binary-package
